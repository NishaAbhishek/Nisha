{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION as SDK_VERSION$1 } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.12.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n  toString() {\n    return this.domStorage_.toString();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n  remove(key) {\n    delete this.cache_[key];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function () {\n  let message = '';\n  for (let i = 0; i < arguments.length; i++) {\n    const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nconst log = function () {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n  if (logger) {\n    for (var _len = arguments.length, varArgs = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      varArgs[_key2] = arguments[_key2];\n    }\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nconst logWrapper = function (prefix) {\n  return function () {\n    for (var _len2 = arguments.length, varArgs = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      varArgs[_key3] = arguments[_key3];\n    }\n    log(prefix, ...varArgs);\n  };\n};\nconst error = function () {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...arguments);\n  logClient.error(message);\n};\nconst fatal = function () {\n  const message = \"FIREBASE FATAL ERROR: \".concat(buildLogMessage_(...arguments));\n  logClient.error(message);\n  throw new Error(message);\n};\nconst warn = function () {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...arguments);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n  addTokenChangeListener(listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    warn(\"Provided AppCheck credentials for the app named \\\"\".concat(this.appName_, \"\\\" \") + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n  removeTokenChangeListener(listener) {}\n  notifyForInvalidToken() {}\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n */\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly) {\n    let nodeAdmin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let persistenceKey = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    let includeNamespaceInQueryParams = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n  get host() {\n    return this._host;\n  }\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n  toString() {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? \"?ns=\".concat(this.namespace) : '';\n    return \"\".concat(protocol).concat(this.host, \"/\").concat(query);\n  }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n */\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n  incrementCounter(name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  }\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    var _this = this;\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n        const [command, arg1, arg2, arg3, arg4] = args;\n        _this.incrementIncomingBytes_(args);\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n        _this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            _this.myPacketOrderer.closeAfter(arg1, () => {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n        const [pN, data] = args;\n        _this.incrementIncomingBytes_(args);\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\nclass WebSocketConnection {\n  /**\r\n   * @param connId identifier for this transport\r\n   * @param repoInfo The info for the websocket endpoint.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The App Check Token for this client.\r\n   * @param authToken The Auth Token for this client.\r\n   * @param transportSessionId Optional transportSessionId if this is connecting\r\n   * to an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if there was a previous\r\n   * connection\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\r\n   * @param repoInfo - The info for the websocket endpoint.\r\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n   * @returns connection url\r\n   */\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options = {\n          headers: {\n            'User-Agent': \"Firebase/\".concat(PROTOCOL_VERSION, \"/\").concat(SDK_VERSION, \"/\").concat(process.platform, \"/\").concat(device),\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = \"Bearer \".concat(this.authToken);\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n  start() {}\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n  static isAvailable() {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   */\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n  appendFrame_(data) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess);\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\r\n   * @param frameCount - The number of frames we are expecting from the server\r\n   */\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @returns Any remaining data to be process, or null if there is none\r\n   */\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess - The frame data\r\n   */\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\r\n   * Send a message to the server\r\n   * @param data - The JSON object to transmit\r\n   */\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param str - String to send.\r\n   */\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\nclass TransportManager {\n  /**\r\n   * @param repoInfo - Metadata around the namespace we're connecting to\r\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n      isSkipPollConnection = true;\n    }\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n  /**\r\n   * @returns The constructor for the initial transport to use\r\n   */\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\r\n   * @returns The constructor for the next transport, or null\r\n   */\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2 /* DISCONNECTED */) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n  onDataMessage_(message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n  onConnectionLost_(everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  }\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  }\n  sendData_(data) {\n    if (this.state_ !== 1 /* CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  close() {\n    if (this.state_ !== 2 /* DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n  refreshAppCheckToken(token) {}\n  onDisconnectPut(pathString, data, onComplete) {}\n  onDisconnectMerge(pathString, data, onComplete) {}\n  onDisconnectCancel(pathString, onComplete) {}\n  reportStats(stats) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n  trigger(eventType) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n      for (var _len5 = arguments.length, varArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n        varArgs[_key6 - 1] = arguments[_key6];\n      }\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n  currentlyOnline() {\n    return this.online_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  toString() {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  }\n}\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\nfunction pathSlice(path) {\n  let begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nclass PersistentConnection extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param applicationId_ - The Firebase App ID for this project\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_;\n    // Used for diagnostic logging.\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false;\n    // Before we get connected, we keep a queue of pending messages to send.\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(request['p'], payload, /*isMerge*/false, /*tag*/null);\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n    return deferred.promise;\n  }\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'q';\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n    req[/*hash*/'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[/*data*/'d'];\n      const status = message[/*status*/'s'];\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + \"filtered on the client. Consider adding \".concat(indexSpec, \" at \") + \"\".concat(indexPath, \" to your security rules for better performance.\"));\n      }\n    }\n  }\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Attempts to authenticate with the given token. If the authentication\r\n   * attempt fails, it's triggered like the token was revoked (the connection is\r\n   * closed).\r\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[/*status*/'s'];\n        const data = res[/*data*/'d'] || 'error';\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/p: pathString\n    };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n    this.sendRequest(action, req);\n  }\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[/*status*/'s'], response[/* data */'d']);\n        }, Math.floor(0));\n      }\n    });\n  }\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/p: pathString,\n      /*data*/d: data\n    };\n    if (hash !== undefined) {\n      request[/*hash*/'h'] = hash;\n    }\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n      if (onComplete) {\n        onComplete(message[/*status*/'s'], message[/* data */'d']);\n      }\n    });\n  }\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(/*stats*/'s', request, result => {\n        const status = result[/*status*/'s'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */'d'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n    this.onConnectStatus_(false);\n  }\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\r\n   * Sends client stats for first connection\r\n   */\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.key';\n  }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_) {\n    let resultGenerator_ = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    let node = this.nodeStack_.pop();\n    let result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nclass LLRBNode {\n  /**\r\n   * @param key - Key associated with this node.\r\n   * @param value - Value associated with this node.\r\n   * @param color - Whether this node is red.\r\n   * @param left - Left child.\r\n   * @param right - Right child.\r\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param key - New key for the node, or null.\r\n   * @param value - New value for the node, or null.\r\n   * @param color - New color for the node, or null.\r\n   * @param left - New left child for the node, or null.\r\n   * @param right - New right child for the node, or null.\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\r\n   * @returns The minimum node in the tree.\r\n   */\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  minKey() {\n    return this.min_().key;\n  }\n  /**\r\n   * @returns The maximum key in the tree.\r\n   */\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\r\n   * @param key - Key to insert.\r\n   * @param value - Value to insert.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the key/value added.\r\n   */\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns New tree, with the minimum key removed.\r\n   */\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n    let n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\r\n   * @param key - The key of the item to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with the specified item removed.\r\n   */\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n  /**\r\n   * @returns Whether this is a RED node.\r\n   */\n  isRed_() {\n    return this.color;\n  }\n  /**\r\n   * @returns New tree after performing any needed rotations.\r\n   */\n  fixUp_() {\n    let n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedLeft.\r\n   */\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after moveRedRight.\r\n   */\n  moveRedRight_() {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n  /**\r\n   * @returns New tree, after rotateLeft.\r\n   */\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\r\n   * @returns New tree, after rotateRight.\r\n   */\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\r\n   * @returns Newt ree, after colorFlip.\r\n   */\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\r\n   * For testing.\r\n   *\r\n   * @returns True if all is well.\r\n   */\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n  isRed_() {\n    return false;\n  }\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_) {\n    let root_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SortedMap.EMPTY_NODE;\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  get(key) {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n  getPredecessorKey(key) {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nclass LeafNode {\n  /**\r\n   * @param value_ - The value to store in this leaf node. The object type is\r\n   * possible in the event of a deferred value\r\n   * @param priorityNode_ - The priority of this node.\r\n   */\n  constructor(value_) {\n    let priorityNode_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n  forEachChild(index, action) {\n    return false;\n  }\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @returns The value of the node.\r\n   */\n  getValue() {\n    return this.value_;\n  }\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   */\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex() {\n    return this;\n  }\n  isIndexed() {\n    return true;\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n}\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.priority';\n  }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\nclass ChildrenNode {\n  /**\r\n   * @param children_ - List of children of this node..\r\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n  getChild(path) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n    const obj = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   */\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   */\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n  getPriority() {\n    return this;\n  }\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  isEmpty() {\n    return false;\n  }\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\nfunction nodeFromJSON(json) {\n  let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return true;\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.value';\n  }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst MIN_PUSH_CHAR = '-';\nconst MAX_PUSH_CHAR = 'z';\nconst MAX_KEY_LEN = 786;\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\nconst successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n  let i = next.length - 1;\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n};\n// `key` is assumed to be non-empty.\nconst predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* VALUE */,\n    snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* CHILD_ADDED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* CHILD_REMOVED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* CHILD_CHANGED */,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* CHILD_MOVED */,\n    snapshotNode,\n    childName\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes() {\n    return false;\n  }\n  getIndexedFilter() {\n    return this;\n  }\n  getIndex() {\n    return this.index_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  getStartPost() {\n    return this.startPost_;\n  }\n  getEndPost() {\n    return this.endPost_;\n  }\n  matches(node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\nclass LimitedFilter {\n  constructor(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a, b) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex() {\n    return this.index_;\n  }\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  hasStart() {\n    return this.startSet_;\n  }\n  hasStartAfter() {\n    return this.startAfterSet_;\n  }\n  hasEndBefore() {\n    return this.endBeforeSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let childKey;\n  let params;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\" /* START_AT */] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\" /* END_AT */] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* LIMIT */] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\n      }\n    }\n    obj[\"vf\" /* VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n    this.listens_ = {};\n  }\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    const pathString = query._path.toString();\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n  refreshAuthToken(token) {\n    // no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n  restRequest_(pathString) {\n    let queryStringParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let callback = arguments.length > 2 ? arguments[2] : undefined;\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken(/*forceRefresh=*/false), this.appCheckTokenProvider_.getToken(/*forceRefresh=*/false)]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType;\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor(/** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Merge {\n  constructor(/** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n  isFiltered() {\n    return this.filtered_;\n  }\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n  getNode() {\n    return this.node_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\" /* CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nclass ImmutableTree {\n  constructor(value) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EmptyChildren();\n    this.value = value;\n    this.children = children;\n  }\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\" /* CHILD_ADDED */ || type === \"child_changed\" /* CHILD_CHANGED */ || type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === \"child_added\" /* CHILD_ADDED */ && oldType === \"child_removed\" /* CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* CHILD_REMOVED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_added\" /* CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* CHILD_CHANGED */ && oldType === \"child_changed\" /* CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n}\n/**\r\n * Singleton instance.\r\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_) {\n    let optCompleteServerCache_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  get query() {\n    return this.query_;\n  }\n}\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n}\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAckUserWrite(syncTree, writeId) {\n  let revert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault = -1 !== removed.findIndex(query => {\n      return query._queryParams.loadsAllData();\n    });\n    const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\n        }\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag = null;\n        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n      } else {\n        removed.forEach(queryToRemove => {\n          const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\nfunction syncTreeTagForQuery_(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n  node() {\n    return this.node_;\n  }\n}\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      children: {},\n      childCount: 0\n    };\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n    this.recursionDepth_ = 0;\n  }\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n}\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\nfunction repoGetValue(repo, query) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n    return Promise.resolve(node);\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/true), (status, errorReason) => {\n    const success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoLog(repo) {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  for (var _len6 = arguments.length, varArgs = new Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {\n    varArgs[_key7 - 1] = arguments[_key7];\n  }\n  log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        const error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* RUN */;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\nfunction repoSendReadyTransactions(repo) {\n  let node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : repo.transactionQueueTree_;\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0 /* RUN */);\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* SENT */;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2 /* COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0 /* RUN */;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\nfunction decodeQuery(queryString) {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(\"Invalid query segment '\".concat(segment, \"' in query '\").concat(queryString, \"'\"));\n    }\n  }\n  return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  getPath() {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType() {\n    return this.eventType;\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n}\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  getPath() {\n    return this.path;\n  }\n  getEventType() {\n    return 'cancel';\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n  get root() {\n    let ref = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `DataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    const childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val() {\n    return this._node.val();\n  }\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    const index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  }\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nclass QueryConstraint {}\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAt() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let key = arguments.length > 1 ? arguments[1] : undefined;\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\nfunction query(query) {\n  let queryImpl = getModularInstance(query);\n  for (var _len7 = arguments.length, queryConstraints = new Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {\n    queryConstraints[_key8 - 1] = arguments[_key8];\n  }\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(\"\".concat(host, \":\").concat(port), /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = \"\".concat(app.options.projectId, \"-default-rtdb.firebaseio.com\");\n  }\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = \"http://\".concat(dbEmulatorHost, \"?ns=\").concat(repoInfo.namespace);\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(\"Database \".concat(appName, \"(\").concat(repo.repoInfo_, \") has already been deleted.\"));\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\nfunction getDatabase() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let url = arguments.length > 1 ? arguments[1] : undefined;\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\nfunction connectDatabaseEmulator(db, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('database', (container, _ref2) => {\n    let {\n      instanceIdentifier: url\n    } = _ref2;\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor(/** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n/**\r\n * @internal\r\n */\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"names":["SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","value","removeItem","prefixedName_","setItem","stringify","get","storedVal","getItem","jsonEval","remove","name","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","message","i","arguments","length","arg","undefined","Array","isArray","apply","logger","firstLog_","enableLogging$1","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","_len","varArgs","_key2","logWrapper","prefix","_len2","_key3","error","fatal","concat","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","deepCopy","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","_this","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","_len3","args","_key4","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","_len4","_key5","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","_len5","_key6","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","online_","isMobileCordova","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","Deferred","request","p","q","_queryObject","outstandingGet","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","isEmpty","delta","serverTimeOffset","map","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","isReactNative","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","assertionError","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","setMaxNode","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON$1","MAX_NODE$1","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","assign","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","_ref","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","referenceConstructor","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","_len6","_key7","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","getModularInstance","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryImpl","_len7","queryConstraints","_key8","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","getDatabase","getApp","_getProvider","identifier","connectDatabaseEmulator","mockUserToken","createMockUserToken","goOffline","goOnline","registerDatabase","variant","SDK_VERSION$1","_registerComponent","Component","_ref2","instanceIdentifier","getProvider","setMultipleInstances","registerVersion","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut"],"sources":["../src/core/version.ts","../src/core/storage/DOMStorageWrapper.ts","../src/core/storage/MemoryStorage.ts","../src/core/storage/storage.ts","../src/core/util/util.ts","../src/core/AppCheckTokenProvider.ts","../src/core/AuthTokenProvider.ts","../src/realtime/Constants.ts","../src/core/RepoInfo.ts","../src/core/stats/StatsCollection.ts","../src/core/stats/StatsManager.ts","../src/realtime/polling/PacketReceiver.ts","../src/realtime/BrowserPollConnection.ts","../src/realtime/WebSocketConnection.ts","../src/realtime/TransportManager.ts","../src/realtime/Connection.ts","../src/core/ServerActions.ts","../src/core/util/EventEmitter.ts","../src/core/util/OnlineMonitor.ts","../src/core/util/Path.ts","../src/core/util/VisibilityMonitor.ts","../src/core/PersistentConnection.ts","../src/core/snap/Node.ts","../src/core/snap/indexes/Index.ts","../src/core/snap/indexes/KeyIndex.ts","../src/core/util/SortedMap.ts","../src/core/snap/comparators.ts","../src/core/snap/snap.ts","../src/core/snap/LeafNode.ts","../src/core/snap/indexes/PriorityIndex.ts","../src/core/snap/childSet.ts","../src/core/snap/IndexMap.ts","../src/core/snap/ChildrenNode.ts","../src/core/snap/nodeFromJSON.ts","../src/core/snap/indexes/PathIndex.ts","../src/core/snap/indexes/ValueIndex.ts","../src/core/util/NextPushId.ts","../src/core/view/Change.ts","../src/core/view/filter/IndexedFilter.ts","../src/core/view/filter/RangedFilter.ts","../src/core/view/filter/LimitedFilter.ts","../src/core/view/QueryParams.ts","../src/core/ReadonlyRestClient.ts","../src/core/SnapshotHolder.ts","../src/core/SparseSnapshotTree.ts","../src/core/stats/StatsListener.ts","../src/core/stats/StatsReporter.ts","../src/core/operation/Operation.ts","../src/core/operation/AckUserWrite.ts","../src/core/operation/ListenComplete.ts","../src/core/operation/Overwrite.ts","../src/core/operation/Merge.ts","../src/core/view/CacheNode.ts","../src/core/view/EventGenerator.ts","../src/core/view/ViewCache.ts","../src/core/util/ImmutableTree.ts","../src/core/CompoundWrite.ts","../src/core/WriteTree.ts","../src/core/view/ChildChangeAccumulator.ts","../src/core/view/CompleteChildSource.ts","../src/core/view/ViewProcessor.ts","../src/core/view/View.ts","../src/core/SyncPoint.ts","../src/core/SyncTree.ts","../src/core/util/ServerValues.ts","../src/core/util/Tree.ts","../src/core/util/validation.ts","../src/core/view/EventQueue.ts","../src/core/Repo.ts","../src/core/util/libs/parser.ts","../src/core/view/Event.ts","../src/core/view/EventRegistration.ts","../src/api/OnDisconnect.ts","../src/api/Reference_impl.ts","../src/api/Database.ts","../src/register.ts","../src/api/ServerValue.ts","../src/api/Transaction.ts","../src/api/test_access.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n *  to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n // eslint-disable-next-line import/no-extraneous-dependencies\n import {\n   _FirebaseService,\n   _getProvider,\n   FirebaseApp,\n   getApp\n } from '@firebase/app';\n import { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n import { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\n import { Provider } from '@firebase/component';\n import {\n   getModularInstance,\n   createMockUserToken,\n   EmulatorMockTokenOptions\n } from '@firebase/util';\n \n import { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\n import {\n   AuthTokenProvider,\n   EmulatorTokenProvider,\n   FirebaseAuthTokenProvider\n } from '../core/AuthTokenProvider';\n import { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\n import { RepoInfo } from '../core/RepoInfo';\n import { parseRepoInfo } from '../core/util/libs/parser';\n import { newEmptyPath, pathIsEmpty } from '../core/util/Path';\n import {\n   fatal,\n   log,\n   enableLogging as enableLoggingImpl\n } from '../core/util/util';\n import { validateUrl } from '../core/util/validation';\n \n import { ReferenceImpl } from './Reference_impl';\n \n export { EmulatorMockTokenOptions } from '@firebase/util';\n /**\n  * This variable is also defined in the firebase Node.js Admin SDK. Before\n  * modifying this definition, consult the definition in:\n  *\n  * https://github.com/firebase/firebase-admin-node\n  *\n  * and make sure the two are consistent.\n  */\n const FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n \n /**\n  * Creates and caches `Repo` instances.\n  */\n const repos: {\n   [appName: string]: {\n     [dbUrl: string]: Repo;\n   };\n } = {};\n \n /**\n  * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n  */\n let useRestClient = false;\n \n /**\n  * Update an existing `Repo` in place to point to a new host/port.\n  */\n function repoManagerApplyEmulatorSettings(\n   repo: Repo,\n   host: string,\n   port: number,\n   tokenProvider?: AuthTokenProvider\n ): void {\n   repo.repoInfo_ = new RepoInfo(\n     `${host}:${port}`,\n     /* secure= */ false,\n     repo.repoInfo_.namespace,\n     repo.repoInfo_.webSocketOnly,\n     repo.repoInfo_.nodeAdmin,\n     repo.repoInfo_.persistenceKey,\n     repo.repoInfo_.includeNamespaceInQueryParams\n   );\n \n   if (tokenProvider) {\n     repo.authTokenProvider_ = tokenProvider;\n   }\n }\n \n /**\n  * This function should only ever be called to CREATE a new database instance.\n  * @internal\n  */\n export function repoManagerDatabaseFromApp(\n   app: FirebaseApp,\n   authProvider: Provider<FirebaseAuthInternalName>,\n   appCheckProvider?: Provider<AppCheckInternalComponentName>,\n   url?: string,\n   nodeAdmin?: boolean\n ): Database {\n   let dbUrl: string | undefined = url || app.options.databaseURL;\n   if (dbUrl === undefined) {\n     if (!app.options.projectId) {\n       fatal(\n         \"Can't determine Firebase Database URL. Be sure to include \" +\n           ' a Project ID when calling firebase.initializeApp().'\n       );\n     }\n \n     log('Using default host for project ', app.options.projectId);\n     dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n   }\n \n   let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n   let repoInfo = parsedUrl.repoInfo;\n \n   let isEmulator: boolean;\n \n   let dbEmulatorHost: string | undefined = undefined;\n   if (typeof process !== 'undefined') {\n     dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n   }\n \n   if (dbEmulatorHost) {\n     isEmulator = true;\n     dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n     parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n     repoInfo = parsedUrl.repoInfo;\n   } else {\n     isEmulator = !parsedUrl.repoInfo.secure;\n   }\n \n   const authTokenProvider =\n     nodeAdmin && isEmulator\n       ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n       : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n \n   validateUrl('Invalid Firebase Database URL', parsedUrl);\n   if (!pathIsEmpty(parsedUrl.path)) {\n     fatal(\n       'Database URL must point to the root of a Firebase Database ' +\n         '(not including a child path).'\n     );\n   }\n \n   const repo = repoManagerCreateRepo(\n     repoInfo,\n     app,\n     authTokenProvider,\n     new AppCheckTokenProvider(app.name, appCheckProvider)\n   );\n   return new Database(repo, app);\n }\n \n /**\n  * Remove the repo and make sure it is disconnected.\n  *\n  */\n function repoManagerDeleteRepo(repo: Repo, appName: string): void {\n   const appRepos = repos[appName];\n   // This should never happen...\n   if (!appRepos || appRepos[repo.key] !== repo) {\n     fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n   }\n   repoInterrupt(repo);\n   delete appRepos[repo.key];\n }\n \n /**\n  * Ensures a repo doesn't already exist and then creates one using the\n  * provided app.\n  *\n  * @param repoInfo - The metadata about the Repo\n  * @returns The Repo object for the specified server / repoName.\n  */\n function repoManagerCreateRepo(\n   repoInfo: RepoInfo,\n   app: FirebaseApp,\n   authTokenProvider: AuthTokenProvider,\n   appCheckProvider: AppCheckTokenProvider\n ): Repo {\n   let appRepos = repos[app.name];\n \n   if (!appRepos) {\n     appRepos = {};\n     repos[app.name] = appRepos;\n   }\n \n   let repo = appRepos[repoInfo.toURLString()];\n   if (repo) {\n     fatal(\n       'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n     );\n   }\n   repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n   appRepos[repoInfo.toURLString()] = repo;\n \n   return repo;\n }\n \n /**\n  * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n  */\n export function repoManagerForceRestClient(forceRestClient: boolean): void {\n   useRestClient = forceRestClient;\n }\n \n /**\n  * Class representing a Firebase Realtime Database.\n  */\n export class Database implements _FirebaseService {\n   /** Represents a `Database` instance. */\n   readonly 'type' = 'database';\n \n   /** Track if the instance has been used (root or repo accessed) */\n   _instanceStarted: boolean = false;\n \n   /** Backing state for root_ */\n   private _rootInternal?: ReferenceImpl;\n \n   /** @hideconstructor */\n   constructor(\n     public _repoInternal: Repo,\n     /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n     readonly app: FirebaseApp\n   ) {}\n \n   get _repo(): Repo {\n     if (!this._instanceStarted) {\n       repoStart(\n         this._repoInternal,\n         this.app.options.appId,\n         this.app.options['databaseAuthVariableOverride']\n       );\n       this._instanceStarted = true;\n     }\n     return this._repoInternal;\n   }\n \n   get _root(): ReferenceImpl {\n     if (!this._rootInternal) {\n       this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n     }\n     return this._rootInternal;\n   }\n \n   _delete(): Promise<void> {\n     if (this._rootInternal !== null) {\n       repoManagerDeleteRepo(this._repo, this.app.name);\n       this._repoInternal = null;\n       this._rootInternal = null;\n     }\n     return Promise.resolve();\n   }\n \n   _checkNotDeleted(apiName: string) {\n     if (this._rootInternal === null) {\n       fatal('Cannot call ' + apiName + ' on a deleted database.');\n     }\n   }\n }\n \n /**\n  * Returns the instance of the Realtime Database SDK that is associated\n  * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n  * with default settings if no instance exists or if the existing instance uses\n  * a custom database URL.\n  *\n  * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n  * Database instance is associated with.\n  * @param url - The URL of the Realtime Database instance to connect to. If not\n  * provided, the SDK connects to the default instance of the Firebase App.\n  * @returns The `Database` instance of the provided app.\n  */\n export function getDatabase(\n   app: FirebaseApp = getApp(),\n   url?: string\n ): Database {\n   return _getProvider(app, 'database').getImmediate({\n     identifier: url\n   }) as Database;\n }\n \n /**\n  * Modify the provided instance to communicate with the Realtime Database\n  * emulator.\n  *\n  * <p>Note: This method must be called before performing any other operation.\n  *\n  * @param db - The instance to modify.\n  * @param host - The emulator host (ex: localhost)\n  * @param port - The emulator port (ex: 8080)\n  * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n  */\n export function connectDatabaseEmulator(\n   db: Database,\n   host: string,\n   port: number,\n   options: {\n     mockUserToken?: EmulatorMockTokenOptions | string;\n   } = {}\n ): void {\n   db = getModularInstance(db);\n   db._checkNotDeleted('useEmulator');\n   if (db._instanceStarted) {\n     fatal(\n       'Cannot call useEmulator() after instance has already been initialized.'\n     );\n   }\n \n   const repo = db._repoInternal;\n   let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n   if (repo.repoInfo_.nodeAdmin) {\n     if (options.mockUserToken) {\n       fatal(\n         'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n       );\n     }\n     tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n   } else if (options.mockUserToken) {\n     const token =\n       typeof options.mockUserToken === 'string'\n         ? options.mockUserToken\n         : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n     tokenProvider = new EmulatorTokenProvider(token);\n   }\n \n   // Modify the repo to apply emulator settings\n   repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n }\n \n /**\n  * Disconnects from the server (all Database operations will be completed\n  * offline).\n  *\n  * The client automatically maintains a persistent connection to the Database\n  * server, which will remain active indefinitely and reconnect when\n  * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n  * to control the client connection in cases where a persistent connection is\n  * undesirable.\n  *\n  * While offline, the client will no longer receive data updates from the\n  * Database. However, all Database operations performed locally will continue to\n  * immediately fire events, allowing your application to continue behaving\n  * normally. Additionally, each operation performed locally will automatically\n  * be queued and retried upon reconnection to the Database server.\n  *\n  * To reconnect to the Database and begin receiving remote events, see\n  * `goOnline()`.\n  *\n  * @param db - The instance to disconnect.\n  */\n export function goOffline(db: Database): void {\n   db = getModularInstance(db);\n   db._checkNotDeleted('goOffline');\n   repoInterrupt(db._repo);\n }\n \n /**\n  * Reconnects to the server and synchronizes the offline Database state\n  * with the server state.\n  *\n  * This method should be used after disabling the active connection with\n  * `goOffline()`. Once reconnected, the client will transmit the proper data\n  * and fire the appropriate events so that your client \"catches up\"\n  * automatically.\n  *\n  * @param db - The instance to reconnect.\n  */\n export function goOnline(db: Database): void {\n   db = getModularInstance(db);\n   db._checkNotDeleted('goOnline');\n   repoResume(db._repo);\n }\n \n /**\n  * Logs debugging information to the console.\n  *\n  * @param enabled - Enables logging if `true`, disables logging if `false`.\n  * @param persistent - Remembers the logging state between page refreshes if\n  * `true`.\n  */\n export function enableLogging(enabled: boolean, persistent?: boolean);\n \n /**\n  * Logs debugging information to the console.\n  *\n  * @param logger - A custom logger function to control how things get logged.\n  */\n export function enableLogging(logger: (message: string) => unknown);\n \n export function enableLogging(\n   logger: boolean | ((message: string) => unknown),\n   persistent?: boolean\n ): void {\n   enableLoggingImpl(logger, persistent);\n }\n ","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}